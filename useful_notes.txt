Dynamic variable definition depending on facts:
extra_var: "{{'This is value 1' if ansible_fqdn == 'server.one.example' else 'This is value 2'}}"

--------------------------------------
Using loop with the contents of a file:

tasks:
  - name: Populate public key
    authorized_key:
      user: tomasz
      state: present
      key: "{{ item }}"
    with_file: #this loop over contents of each file, in this case the SSH key
      - /home/tomasz/.ssh/id_rsa.pub
      
--------------------------------------
One way to enable user to use sudo to become root without a password is to install a file with the approproate directives into /etc/sudoers.d with 0400 permissions:
someuser ALL=(ALL) NOPASSWD:ALL

"Someuser" is not getting the same priviledges as root; that user BECOMES root, when using sudo <command>.

--------------------------------------
Access hostvars:
ansible Centos1 -m debug -a 'var=hostvars'

This lists the variables pre-facts gathering, as this is an ad-hoc command and those are master node's variables.

--------------------------------------
When gather_facts = true, the hostvars in the playbook refers to the managed host(s) which was targeted via playbook

---
- name: test variables
  hosts: all

  tasks:
    - name: Test host vars
      debug:
        var: hostvars
        
Then a variable can be accessed directly, for example:

    - name: Test host vars
      debug:
        var: ansible_python.version_info
        
Here, a variable does not need "{{ }}", as the var option calls its name directly however if we want to print a message with a variable expansion, then this is what we need:

    - name: Test host vars
      debug:
        msg: "This is the Python version: {{ ansible_python.version_info }}"
        
                                ###***The above is true for variables returned as dicts!***###

For variables returned as lists, we need to access those with a list index. An example would be using ansible_mounts, where we want to see the name of the second mount in ansible_mounts:

---
- name: Play 1 - prepare the host
  hosts: Centos1

  tasks:
    - name: see mounts
      debug:
        var: ansible_mounts[1].mount
                                    

--------------------------------------
Ansible playbook keywords: https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html
